#!/usr/bin/env node
"use strict";

var packageInfo = require("../package.json");
var junitXmlProcessor = require("../lib/index.js");
var program = require("commander");

program
  .version(packageInfo.version)
  .option("-s, --removeSkipped", "remove skipped testcases")
  .option("-e, --removeErrors", "remove testcases with errors")
  .option("-f, --removeFailures", "remove testcases with failures")
  .option("-x, --schema", "validate against known schemas")
  .option("-p, --patches <listOfIds>", "patches to apply, by their id, delimited by comma; see " + packageInfo.homepage)
  .option(
    "-o, --out <outputfile>",
    "file to output to",
    "./junit-new.xml"
  )
  .option("-d, --debug", "print debug information")
  .arguments("<inputJunitXMLfile>");

program.parse(process.argv);

if (!program.args.length > 0) {
  console.error("ERROR: Missing file to process...");
  program.help();
} else {
  const options = program.opts();

  if (options.schema) {
    // validate schema
    var processorOptions = {
      inputFile: program.args[0],
      debug: options.debug
    };
    var schemasOk = junitXmlProcessor.validate(processorOptions);
    process.exit((schemasOk.length > 0) ? 0 : 1);
  } else {
    // process and modify XML
    var patches = options.patches ? options.patches.split(',') : []; 

    var processorOptions = {
      inputFile: program.args[0],
      removeSkipped: options.removeSkipped,
      removeErrors: options.removeErrors,
      removeFailures: options.removeFailures,
      patches: patches,
      debug: options.debug
    };
    try {
      var res = junitXmlProcessor.handle(processorOptions);
      junitXmlProcessor.writeXML(options.out, res);
    } catch (error) {
      console.error(error.message);
    }
  }
}
